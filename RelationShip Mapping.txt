
@ONE-TO-ONE RELATIONSHIP

@Entity
@Table(name = "users")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String username;
    
    // One-to-One relationship with Profile
    @OneToOne(mappedBy = "user")
    private Profile profile;

    // getters and setters
}

@Entity
@Table(name = "profiles")
public class Profile {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String firstName;
    
    private String lastName;
    
    // One-to-One relationship with User
    @OneToOne
    @JoinColumn(name = "user_id")
    private User user;

    // getters and setters
}

@ONE-TO-MANY

@Entity
@Table(name = "authors")
public class Author {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String name;
    
    // One-to-Many relationship with Book
    @OneToMany(mappedBy = "author")
    private List<Book> books;

    // getters and setters
}

@Entity
@Table(name = "books")
public class Book {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String title;
    
    // Many-to-One relationship with Author
    @ManyToOne
    @JoinColumn(name = "author_id")
    private Author author;

    / 
}

@MANY-TO-MANY

@Entity
@Table(name = "students")
public class Student {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String name;
    
    // Many-to-Many relationship with Course
    @ManyToMany
    @JoinTable(
        name = "student_course",
        joinColumns = @JoinColumn(name = "student_id"),
        inverseJoinColumns = @JoinColumn(name = "course_id")
    )
    private List<Course> courses;

    // getters and setters
}

@Entity
@Table(name = "courses")
public class Course {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String title;
    
    // Many-to-Many relationship with Student
    @ManyToMany(mappedBy = "courses")
    private List<Student> students;

    // getters and setters
}




---------------------------------------------------------------------------------------------------

Hibewrnate Mapping

Granularity Mismatch
Inheritence Mapping

1. Single table 
2. Joined table
3. table per class
4. Mapped supar class

Association Mapping 
1. One to One
   Default Fetch type : Eagar
2. One to Many
   Default Fetch type : Lazy
3. Many to One
   Default Fetch type : Eagar
4. Many to Many
   Default Fetch type : Lazy
   
Bidirectional Mapping : member on both owning side inverse side
Unidirectional Mapping : member on inverse side    
 
Example Of a project Book My Way

User Entity:

	Fields:
	id: Long (Primary Key)
	username: String
	email: String (Unique)
	password: String (Hashed and Salted)
	firstName: String
	lastName: String
	phoneNumber: String
	address: String
	role: Enum (e.g., USER, ADMIN)
	registrationDate: LocalDateTime
	lastLoginDate: LocalDateTime

	Flight Entity:

	Fields:
	id: Long (Primary Key)
	flightNumber: String (Unique)
	airline: String
	departureAirport: String
	arrivalAirport: String
	departureDateTime: LocalDateTime
	arrivalDateTime: LocalDateTime
	price: BigDecimal
	capacity: Integer
	availableSeats: Integer

	Hotel Entity:

	Fields:
	id: Long (Primary Key)
	name: String
	address: String
	city: String
	state: String
	country: String
	rating: Double
	pricePerNight: BigDecimal
	totalRooms: Integer
	availableRooms: Integer
	amenities: Set<Amenity> (OneToMany relationship with Amenity Entity)

	Booking Entity:

	Fields:
	id: Long (Primary Key)
	user: User (ManyToOne relationship with User)
	flight: Flight (ManyToOne relationship with Flight)
	hotel: Hotel (ManyToOne relationship with Hotel)
	bookingDateTime: LocalDateTime
	totalAmount: BigDecimal
	status: Enum (e.g., CONFIRMED, PENDING, CANCELED)
	passengers: List<Passenger> (OneToMany relationship with Passenger Entity)
	payment: Payment (OneToOne relationship with Payment Entity)
	coupon: Coupon (ManyToOne relationship with Coupon Entity)

	Review Entity:

	Fields:
	id: Long (Primary Key)
	user: User (ManyToOne relationship with User)
	hotel: Hotel (ManyToOne relationship with Hotel)
	flight: Flight (ManyToOne relationship with Flight)
	rating: Double
	comment: String
	reviewDateTime: LocalDateTime

	Payment Entity:

	Fields:
	id: Long (Primary Key)
	booking: Booking (OneToOne relationship with Booking)
	paymentDateTime: LocalDateTime
	amount: BigDecimal
	paymentStatus: Enum (e.g., SUCCESS, FAILED)
	paymentMethod: Enum (e.g., CREDIT_CARD, PAYPAL, CASH)
	paymentGateway: PaymentGateway (ManyToOne relationship with PaymentGateway Entity)

	Deal Entity:

	Fields:
	id: Long (Primary Key)
	title: String
	description: String
	discountPercentage: Double
	startDate: LocalDate
	endDate: LocalDate
	applicableFlights: List<Flight> (ManyToMany relationship with Flight Entity)
	applicableHotels: List<Hotel> (ManyToMany relationship with Hotel Entity)

	City Entity:

	Fields:
	id: Long (Primary Key)
	name: String
	state: State (ManyToOne relationship with State Entity)
	
	Country Entity:

	Fields:
	id: Long (Primary Key)
	name: String
	isoCode: String
	states: List<State> (OneToMany relationship with State Entity)

	State Entity:

	Fields:
	id: Long (Primary Key)
	name: String
	country: Country (ManyToOne relationship with Country Entity)
	cities: List<City> (OneToMany relationship with City Entity)

	Amenity Entity:

	Fields:
	id: Long (Primary Key)
	name: String
	description: String

	RoomType Entity:

	Fields:
	id: Long (Primary Key)
	name: String
	description: String

	PaymentGateway Entity:

	Fields:
	id: Long (Primary Key)
	name: String
	description: String
	supportedCurrencies: Set<String>

	Passenger Entity:

	Fields:
	id: Long (Primary Key)
	booking: Booking (ManyToOne relationship with Booking)
	firstName: String
	lastName: String
	age: Integer
	gender: Enum (e.g., MALE, FEMALE, OTHER)
	seatNumber: String

	FlightClass Entity:

	Fields:
	id: Long (Primary Key)
	name: String
	description: String

	Coupon Entity:

	Fields:
	id: Long (Primary Key)
	code: String
	description: String
	discountAmount: BigDecimal
	expirationDate: LocalDate

	NewsletterSubscriber Entity:

	Fields:
	id: Long (Primary Key)
	email: String
	subscribedDate: LocalDate






