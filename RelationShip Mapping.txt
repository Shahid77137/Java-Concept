
@ONE-TO-ONE RELATIONSHIP

@Entity
@Table(name = "users")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String username;
    
    // One-to-One relationship with Profile
    @OneToOne(mappedBy = "user")
    private Profile profile;

    // getters and setters
}

@Entity
@Table(name = "profiles")
public class Profile {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String firstName;
    
    private String lastName;
    
    // One-to-One relationship with User
    @OneToOne
    @JoinColumn(name = "user_id")
    private User user;

    // getters and setters
}

@ONE-TO-MANY

@Entity
@Table(name = "authors")
public class Author {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String name;
    
    // One-to-Many relationship with Book
    @OneToMany(mappedBy = "author")
    private List<Book> books;

    // getters and setters
}

@Entity
@Table(name = "books")
public class Book {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String title;
    
    // Many-to-One relationship with Author
    @ManyToOne
    @JoinColumn(name = "author_id")
    private Author author;

    / 
}

@MANY-TO-MANY

@Entity
@Table(name = "students")
public class Student {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String name;
    
    // Many-to-Many relationship with Course
    @ManyToMany
    @JoinTable(
        name = "student_course",
        joinColumns = @JoinColumn(name = "student_id"),
        inverseJoinColumns = @JoinColumn(name = "course_id")
    )
    private List<Course> courses;

    // getters and setters
}

@Entity
@Table(name = "courses")
public class Course {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String title;
    
    // Many-to-Many relationship with Student
    @ManyToMany(mappedBy = "courses")
    private List<Student> students;

    // getters and setters
}




---------------------------------------------------------------------------------------------------

Hibewrnate Mapping

Granularity Mismatch
Inheritence Mapping

1. Single table 
2. Joined table
3. table per class
4. Mapped supar class

Association Mapping 
1. One to One
   Default Fetch type : Eagar
2. One to Many
   Default Fetch type : Lazy
3. Many to One
   Default Fetch type : Eagar
4. Many to Many
   Default Fetch type : Lazy
   
Bidirectional Mapping : member on both owning side inverse side
Unidirectional Mapping : member on inverse side    

One to Many and Many to One

Employee (id, name, email)
Account (id, acc_Number, emp_Id)

Employee -> One-to-Many
Account -> Many-to-One

Which table/Entity is owning side ?
Ans :- Account

Which table/Entity is inverse/referencing side ?
Ans :- Employee


*** Here Employee is parent/referencing/inverse side 
*** Use mapped by at the inverse side it will have field name from Owning side (Object reference)

*** Here Account is Owning side
*** Use @JoinColumn at owning side and it will contains name of the forign key column



FetchType.LAZY: This is the default behavior if the fetch attribute is not explicitly specified. With
LAZY fetching, the associated entities are not loaded from the database until they are accessed for
the first time. It means that the related entity is loaded only when you call a method that requires
access to that associated entity. Lazy loading helps in avoiding unnecessary database queries and can
lead to better performance when dealing with large or complex object graphs.


FetchType.EAGER: With EAGER fetching, the associated entities are immediately loaded from the database
along with the parent entity. It means that when you retrieve the parent entity, JPA will automatically
fetch the associated entities as well. Eager loading is useful when you know that you will frequently
need the related entities and want to load them upfront to avoid potential performance issues due to
repeated database queries for each association.



CascadeType.ALL -> Is is a setting in Java Persistence API (JPA) that allows all operations 
(persist, merge, remove, refresh, detach) performed on a parent entity to be cascaded to its 
associated child entities automatically. It simplifies managing the associated entities and ensures that 
changes to the parent entity affect its children without explicitly handling each operation separately. 
However, it should be used carefully to avoid unintended data modifications or deletions.
