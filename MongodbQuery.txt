Practicing Quary in both MySQL and MongoDB

problem 1 : Understand creating tables in SQL / collections in MongoDB.
Write Query : Create a Customers table / collection with the following fields: id (unique identifier), name, email, address, and phone_number.
In MySQL

creation of customer table :
CREATE TABLE Customers (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    address VARCHAR(255),
    phone_number VARCHAR(50)
);

In MongoDB

creation customer collection :
{
  "_id": ObjectId(), // a unique identifier created by MongoDB itself
  "name": String,
  "email": String,
  "address": String,
  "phone_number": String
}

problem 2 : Understand inserting data into SQL tables / MongoDB collections
Write Query : Insert five rows / documents into the Customers table / collection with data of your choice.

In MYSQL 

INSERT INTO users (id, name, email, address, phone_number)
VALUES
    (1, 'John Doe', 'johndoe@example.com', '123 Main St', '555-1234'),
    (2, 'Jane Smith', 'janesmith@example.com', '456 Elm St', '555-5678'),
    (3, 'Mike Johnson', 'mikejohnson@example.com', '789 Oak St', '555-9012'),
    (4, 'Sarah Adams', 'sarahadams@example.com', '321 Pine St', '555-3456'),
    (5, 'David Brown', 'davidbrown@example.com', '654 Maple St', '555-7890');


IN MongoDB

db.users.insertMany([
    {
        id: 1,
        name: 'John Doe',
        email: 'johndoe@example.com',
        address: '123 Main St',
        phone_number: '555-1234'
    },
    {
        id: 2,
        name: 'Jane Smith',
        email: 'janesmith@example.com',
        address: '456 Elm St',
        phone_number: '555-5678'
    },
    {
        id: 3,
        name: 'Mike Johnson',
        email: 'mikejohnson@example.com',
        address: '789 Oak St',
        phone_number: '555-9012'
    },
    {
        id: 4,
        name: 'Sarah Adams',
        email: 'sarahadams@example.com',
        address: '321 Pine St',
        phone_number: '555-3456'
    },
    {
        id: 5,
        name: 'David Brown',
        email: 'davidbrown@example.com',
        address: '654 Maple St',
        phone_number: '555-7890'
    }
]);

problem 3 : Understand basic data fetching in SQL / MongoDB
Write Query :  Write a query to fetch all data from the **`Customers`** table / collection.

IN MYSQL

SELECT * FROM Customers;

IN MongoDB

db.Customers.find({});

problem 4 :  Understand how to select specific fields in SQL / MongoDB
Write Query : Write a query to select only the name and email fields for all customers.

IN MySQL

SELECT name, email FROM Customers;

IN MongoDB

db.Customers.find({}, { name: 1, email: 1 });

problem 5 : Understand basic WHERE clause in SQL / MongoDB's find method
Write Query : Write a query to fetch the customer with the id of 3.

IN MySQL 

SELECT * FROM Customers WHERE id = 3;

IN MongoDB

db.Customers.find({ id: 3 });

problem 6 : Understand using string patterns in SQL (LIKE clause) / using regex in MongoDB
Write Query : Write a query to fetch all customers whose name starts with 'A'.

IN MYSQL

SELECT * FROM Customers WHERE name LIKE 'A%';


IN MongoDB

db.Customers.find({ name: /^A/ });

problem 7 : Understand how to order data in SQL / MongoDB.
Write Query : Write a query to fetch all customers, ordered by name in descending order.

IN MySQL

SELECT * FROM Customers ORDER BY name DESC;

IN MongoDB

db.Customers.find().sort({ name: -1 });

problem 8 : Understand data updating in SQL / MongoDB.
Write Query : Write a query to update the address of the customer with id 4.

IN MYSQL

UPDATE Customers SET address = 'New Address' WHERE id = 4;

IN MongoDB

db.Customers.updateOne({ id: 4 }, { $set: { address: 'New Address' } });

problem 9 : Understand how to limit results in SQL / MongoDB.
Write Query :  Write a query to fetch the top 3 customers when ordered by id in ascending order.

IN MYSQL

SELECT * FROM Customers ORDER BY id ASC LIMIT 3;

IN MongoDB

db.Customers.find().sort({ id: 1 }).limit(3);

problem 10 : Understand data deletion in SQL / MongoDB.
Write Query :  Write a query to delete the customer with id 2.

IN MYSQL

DELETE FROM Customers WHERE id = 2;

IN MongoDB

db.Customers.deleteOne({ id: 2 });

problem 11 : Understand how to count rows / documents in SQL / MongoDB
Write Query : Write a query to count the number of customers.

IN MYSQL

SELECT COUNT(*) as total_customers FROM Customers;

IN MongoDB

db.Customers.countDocuments();

problem 12 : Understand how to skip rows / documents in SQL / MongoDB
Write Query : Write a query to fetch all customers except the first two when ordered by id in ascending order.

IN MYSQL

SELECT * FROM Customers ORDER BY id ASC OFFSET 2;

IN MongoDB

db.Customers.find().sort({ id: 1 }).skip(2);

problem 13 :  Understand filtering with multiple conditions in SQL / MongoDB
Write Query :  Write a query to fetch all customers whose **`id`** is greater than 2 and **`name`** starts with 'B'.

IN MYSQL

SELECT * FROM Customers WHERE id > 2 AND name LIKE 'B%';

IN MongoDB

db.Customers.find({ id: { $gt: 2 }, name: /^B/ });

problem 14 : Understand how to use OR conditions in SQL / MongoDB
Write Query :  Write a query to fetch all customers whose id is less than 3 or name ends with 's'.

IN MYSQL

SELECT * FROM Customers WHERE id < 3 OR name LIKE '%s';

IN MongoDB

db.Customers.find({ $or: [ { id: { $lt: 3 } }, { name: /s$/ } ] });

problem 15 :  Understand how to use NULL checks in SQL / MongoDB
Write Query : Write a query to fetch all customers where the phone_number field is not set or is null.

IN MYSQL

SELECT * FROM Customers WHERE phone_number IS NULL OR phone_number = '';

IN MongoDB

db.Customers.find({ $or: [{ phone_number: { $exists: false } }, { phone_number: null }] });


-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-COMPELETE-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=
